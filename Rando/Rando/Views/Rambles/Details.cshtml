@using Rando.Models;
@using Rando.ViewModels;
@model RamblePageViewModel;
    <style type="text/css">
        #map {
            height: 421px;
        }
    </style>

    @{
        ViewData["Title"] = "Ramble Opinion";
    }
<div class="container my-5 pb-5">
    <h1>@Html.DisplayFor(model => model.Ramble.Title)</h1>

    <div>
        <h4 class="mt-3">@Html.DisplayFor(model => model.Ramble.Region)</h4>

        <div class="row mt-5">
            <div class="col-md-8">
                <div id="map"></div>
                <div class="row pt-4">
                    <h4 class="col-md-12">Description</h4>
                </div>
                <div class="row pt-3">
                    <div class="mx-3">
                        @Html.DisplayFor(model => model.Ramble.Description)
                    </div>
                </div>
            </div>
            <div class="col-md-4">
                <div class="card mb-4 px-3 my-0">
                    <div class="row pt-2 my-2 ml-1">
                        <div class="col-sm-6">
                            <h6>Distance</h6>
                            <p> @Html.DisplayFor(model => model.Ramble.Distance) km</p>
                        </div>
                        <div class="col-sm-6">
                            <h6>Durée moyenne</h6> <p>@Html.DisplayFor(model => model.Ramble.Duration) h </p>
                        </div>
                    </div>
                    <div class="row my-2 ml-1">
                        <div class="col-sm-6">
                            <h6>Dénivelé positif</h6> <p>@Html.DisplayFor(model => model.Ramble.HeightDifferencePositive) m</p>
                        </div>
                        <div class="col-sm-6">
                            <h6>Dénivelé négatif</h6><p> @Html.DisplayFor(model => model.Ramble.HeightDifferenceNegative) m</p>
                        </div>
                    </div>
                    <div class="row my-2 ml-1">
                        <div class="col-sm-12">
                            <h6>Difficulté</h6> <p>@Html.DisplayFor(model => model.Ramble.Difficulty)</p>
                        </div>
                    </div>
                    <div class="row my-2 ml-1">
                        <div class="col-sm-6">
                            <h6>Région</h6><p> @Html.DisplayFor(model => model.Ramble.Region)</p>
                        </div>
                        <div class="col-sm-6">
                            <h6>Commune</h6> <p>@Html.DisplayFor(model => model.Ramble.City)</p>
                        </div>
                    </div>
                    <div class="row my-2 ml-1">
                        <div class="col-sm-6">
                            <h6>Latitude</h6> <p>@Html.DisplayFor(model => model.Ramble.DepartLatitude)</p>
                        </div>
                        <div class="col-sm-6">
                            <h6>Longitude</h6> <p>@Html.DisplayFor(model => model.Ramble.DepartLongitude)</p>
                        </div>
                    </div>
                </div>
                <div class="card mb-4 px-3 my-0">
                    <div class="row my-2 ml-1">
                        <div class="col-sm-12">
                            <h6 class="py-2">Avis</h6>
                            @if (@Model.OpinionsNumber < 1)
                            {
                            <p>Aucun avis</p>
                            }
                            else
                            {
                            <p>@Html.DisplayFor(model => model.OpinionsNumber) avis</p>
                            <p>Note moyenne : @Html.DisplayFor(model => model.OpinionAverage)</p>
                            }
                        </div>
                    </div>
                </div>
                <div class="card mb-4 px-3 my-0">
                    <div class="row my-2 ml-1">
                        <div class="col-sm-12">
                            <h6 class="py-2">Donnez votre avis</h6>
                            <div class="col-md-12">
                                <form method="POST" asp-action="PostOpinion" class=" ml-n3 justify-content-center">
                                    <input type="hidden" name="Ramble.Id" value="@Html.DisplayFor(model => model.Ramble.Id)">
                                    <input type="hidden" name="Ramble.Title" value="@Html.DisplayFor(model => model.Ramble.Title)">
                                    <input type="hidden" name="Ramble.Description" value="@Html.DisplayFor(model => model.Ramble.Description)">
                                    <input type="hidden" name="Ramble.HikingPhotoUrl" value="@Html.DisplayFor(model => model.Ramble.HikingPhotoUrl)">
                                    <input type="hidden" name="Ramble.Region" value="@Html.DisplayFor(model => model.Ramble.Region)">
                                    <input type="hidden" name="Ramble.City" value="@Html.DisplayFor(model => model.Ramble.City)">
                                    <input type="hidden" name="Ramble.DepartLatitude" value="@Html.DisplayFor(model => model.Ramble.DepartLatitude)">
                                    <input type="hidden" name="Ramble.DepartLongitude" value="@Html.DisplayFor(model => model.Ramble.DepartLongitude)">
                                    <input type="hidden" name="Ramble.Distance" value="@Html.DisplayFor(model => model.Ramble.Distance)">
                                    <input type="hidden" name="Ramble.HeightDifferencePositive" value="@Html.DisplayFor(model => model.Ramble.HeightDifferencePositive)">
                                    <input type="hidden" name="Ramble.HeightDifferenceNegative" value="@Html.DisplayFor(model => model.Ramble.HeightDifferenceNegative)">
                                    <input type="hidden" name="Ramble.Duration" value="@Html.DisplayFor(model => model.Ramble.Duration)">
                                    <input type="hidden" name="Ramble.Difficulty" value="@Html.DisplayFor(model => model.Ramble.Difficulty)">
                                    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                                    <div class="form-group">
                                        <input name="Score" placeholder="Votre note" class="form-control" />
                                    </div>
                                    <div class="form-group">
                                        <textarea name="Comment" placeholder="Votre message" class="col-md-12" style="height:200px;"></textarea>
                                    </div>
                                    <div class="form-group">
                                        <input type="submit" value="Poster" class="btn btn-primary" />
                                    </div>
                                </form>
                            </div>                            
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="row justify-content-center py-3">
            <img src="@Html.DisplayFor(model => model.Ramble.HikingPhotoUrl)" style="width: 15rem;" class="mx-3" />
            <img src="@Html.DisplayFor(model => model.Ramble.HikingPhotoUrl)" style="width: 15rem;" class="mx-3" />
            <img src="@Html.DisplayFor(model => model.Ramble.HikingPhotoUrl)" style="width: 15rem;" class="mx-3" />
            <img src="@Html.DisplayFor(model => model.Ramble.HikingPhotoUrl)" style="width: 15rem;" class="mx-3" />
        </div>
        <div class="row mb-5">
            <h4 class="col-md-12 mt-5">Avis</h4>
            <div class="col-md-12">
            @if (@Model.Opinions != null)
            {
                if (@Model.OpinionsNumber < 1)
                {
                    <p>Aucun avis</p>
                }
                else
                {
                <div class="row">
                    <div class="col-md-3">
                    Note moyenne : @Html.DisplayFor(model => model.OpinionAverage)
                    </div>
                    <div class="col-md-3">
                    @Html.DisplayFor(model => model.OpinionsNumber) avis
                    </div>
                </div>
                <div class="row justify-content-around">
                    @foreach (Opinion opinion in Model.Opinions)
                    {
                        <div class="card col-md-4 my-4 mx-3">
                            <div class="card-body">
                                <p class="card-text">Note : @opinion.Score /5</p>
                                <p class="card-text">Date : @opinion.CreatedAt</p>
                                <p class="card-text">Randonneur : @opinion.User.Pseudo</p>
                                <p class="card-text">@opinion.Comment</p>
                            </div>
                        </div>
                    }
                </div>
                }
            }
            </div>
        </div>               
        <div>
            <a asp-action="Index">Retour</a>
        </div>
    </div>


    <script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js"
            integrity="sha512-XQoYMqMTK8LvdxXYG3nZ448hOEQiglfqkJs1NOQV44cWnUrBc8PkAOcXy20w0vlaXaVUearIOBhiXZ5V3ynxwA=="
            crossorigin=""></script>
    <script type='text/javascript' src='https://unpkg.com/leaflet.markercluster@1.3.0/dist/leaflet.markercluster.js'></script>

    @*<script type="text/javascript">
        let rambleMap = null;
        let latDepart = 42.87415;
        let lat = 42.87415;
        let longDepart = 0.500808;
        let long = 0.500808;
        let name = "Départ";
        let marker;
        let markers = [];
        let steps = [];
        let points [];
        let polyline;
        @{ foreach (Step step in Model.Steps)
           {
                <Text>
                lat = @step.Latitude
                long = @step.Longitude
                name = @step.Name;
                </Text>
           }

         }



        function initialisationMap() {
            rambleMap = L.map('map').setView([latDepart, longDepart], 13);
            L.tileLayer('https://{s}.tile.openstreetmap.fr/osmfr/{z}/{x}/{y}.png', {
                attribution: 'Map data &copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors, Imagery © <a href="https://www.mapbox.com/">Mapbox</a>',
                minZoom: 5,
                maxZoom: 25,
            }).addTo(rambleMap);

            for (step in steps) {
                marker = L.marker([steps[step].lat, steps[step].long]).addTo(rambleMap);
                marker.bindPopup("<p>" + step.name + "</p>");
                markers.push(marker);
            }
            let markersGroup = new L.featureGroup(markers);
            rambleMap.fitBounds(markersGroup.getBounds().pad(0.5));
            CreatePolyline("red");
            polyline.addTo(rambleMap);
        }
        window.onload = function () {
            initialisationMap();
        };

        function CreatePolyline(colorChoice) {
            polyline = L.polyline(points, { color: colorChoice });

             </script>
        }*@



</div>